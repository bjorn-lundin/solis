-----------------------------------------------------
-- This file is AUTOGENERATED by                     
-- repo                                              
--                                                   
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!----- 
-----------DO NOT EDIT THIS FILE!!!!---------------- 
-----------------------------------------------------



with Ada.Containers.Doubly_Linked_Lists;
with Ada.Containers.Hashed_Maps;
with Ada.Containers.Ordered_Maps;
with Ada.Strings;
with Ada.Strings.Hash;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Gnatcoll.Json; use Gnatcoll.Json;
with Types, Calendar2, Sql;
with Table_Utils;  --All tables inherit from here

pragma Elaborate_All(Calendar2);



package Table_Ateams is
  use Types, Calendar2;
  --
  --  Table name as string 
  --

  Table_Ateams_Name     : constant String := "ATEAMS";
  Table_Ateams_Set_Name : constant String := "ATEAMS_SET";
  Table_Ateams_Row_Name : constant String := "ATEAMS_ROW";

  --
  -- Column names as strings
  --

  Teamid_Name : constant String := "TEAMID";
  Teamname_Name : constant String := "TEAMNAME";
  Countrycode_Name : constant String := "COUNTRYCODE";
  Ixxlupd_Name : constant String := "IXXLUPD";
  Ixxluts_Name : constant String := "IXXLUTS";
  --
  -- Column names as enumerator literals
  --

  type Column_Type is (
    Teamid,
    Teamname,
    Countrycode,
    Ixxlupd,
    Ixxluts);
  --
  -- The type definition
  --

  type Data_Type is new Table_Utils.Root_Table_Type with record
    Teamid : Integer_4 := 0 ; -- Primary Key
    Teamname : String(1 .. 50) := (others => ' ') ; 
    Countrycode : String(1 .. 2) := (others => ' ') ; 
    Ixxlupd : String(1 .. 15) := (others => ' ') ; 
    Ixxluts : Time_Type := Time_Type_First ; 
  end record;


  -- Procedures for all DBMS

  -- Procedures for DBMS SQL
  -- Primary key
  function Get(Stm : in Sql.Statement_Type) return Table_Ateams.Data_Type;
  --------------------------------------------
  -- Primary key
  procedure Read(Data       : in out Table_Ateams.Data_Type;
                 End_Of_Set : in out Boolean);
  --------------------------------------------
  -- Primary key
  function Is_Existing(
                       Teamid : Integer_4) 
                           return Boolean;
  --------------------------------------------
  -- Primary key
  function Get(
                       Teamid : Integer_4)
                           return Table_Ateams.Data_Type;
  --------------------------------------------
  -- Primary key
  procedure Delete(Data : in Table_Ateams.Data_Type);
  --------------------------------------------
  -- Primary key
  procedure Update(Data : in out Table_Ateams.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  -- Primary key
  procedure Insert(Data : in out Table_Ateams.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  -- Primary key
  procedure Delete_Withcheck(Data : in Table_Ateams.Data_Type);
  --------------------------------------------
  -- Primary key
  procedure Update_Withcheck(Data : in out Table_Ateams.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
   -- stop Print_Def_Functions_Spec.Primary_Procs_Spec




  -- Procedures for all DBMS, primitives

  function To_String(Data : in Table_Ateams.Data_Type) return String;

  function To_JSON(Data : in Table_Ateams.Data_Type) return JSON_Value;

  function From_JSON(JSON_Data : in JSON_Value) return Table_Ateams.Data_Type;

  function To_Xml(Data      : in Table_Ateams.Data_Type;
                  Ret_Start : in Boolean;
                  Ret_Data  : in Boolean;
                  Ret_End   : in Boolean) return String;


  package Ateams_List_Pack2 is new Ada.Containers.Doubly_Linked_Lists(Table_Ateams.Data_Type);

  subtype Key_Type is String(1..15);

  package Ateams_Map_Pack_String is new Ada.Containers.Hashed_Maps(
      Key_Type,
      Unbounded_String,
      Ada.Strings.Hash,
      "=",
      "=");

  package Ateams_Map_Pack_Column_Type is new Ada.Containers.Ordered_Maps(
      Column_Type,
      Unbounded_String,
      "<",
      "=");




  function To_Map (Data : Table_Ateams.Data_Type'class) return Table_Ateams.Ateams_Map_Pack_String.Map;


  function To_Map (Data : Table_Ateams.Data_Type'class) return Table_Ateams.Ateams_Map_Pack_Column_Type.Map;

  --------------------------------------------

  --------------------------------------------

  procedure Read_List(Stm  : in     Sql.Statement_Type;
                      List : in out Ateams_List_Pack2.List;
                      Max  : in     Integer_4 := Integer_4'Last);

  --------------------------------------------


  procedure Read_All(List  : in out Ateams_List_Pack2.List;
                     Order : in     Boolean := False;
                     Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------



  -- Procedures for all DBMS, others 

  procedure From_Xml(Xml_Filename : in Unbounded_String;
                     A_List       : in out Ateams_List_Pack2.List);


  Empty_Data : Table_Ateams.Data_Type;
end Table_Ateams ;
