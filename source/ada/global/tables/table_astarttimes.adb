
-----------------------------------------------------
-- This file is AUTOGENERATED by                     
-- repo                                              
--                                                   
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!----- 
-----------DO NOT EDIT THIS FILE!!!!---------------- 
-----------------------------------------------------




pragma Warnings(Off);
with Process_Io, Utils;
with Ada.Strings.Fixed; use Ada.Strings.Fixed;
with Sax.Readers;              use Sax.Readers;
with Input_Sources.File;       use Input_Sources.File;
with Unicode.CES;
with Unicode.Encodings;
with Sax.Attributes;



package body Table_Astarttimes is

  Stm_Select,
  Stm_Delete,
  Stm_Update,
  Stm_Insert,
  Stm_Select_All,
  Stm_Select_All_O  : Sql.Statement_Type;


  -- Primary keys, when several fields
  Stm_Select_I1_Starttime,
  Stm_Select_I1_Starttime_O,
  Stm_Delete_I1_Starttime : Sql.Statement_Type; 

  -- Primary keys, when several fields
  Stm_Select_I1_Starttime_Venue,
  Stm_Select_I1_Starttime_Venue_O,
  Stm_Delete_I1_Starttime_Venue : Sql.Statement_Type; 

  -- non unique index all fields
  Stm_Delete_Starttime_Venue: Sql.Statement_Type;



  -- Procedures for all DBMS

  -- Procedures for DBMS SQL
  -- Primary key

  function Get(Stm : in Sql.Statement_Type) return Table_Astarttimes.Data_Type is
    Data : Table_Astarttimes.Data_Type;
  begin
    Stm.Get_Timestamp("STARTTIME", Data.Starttime);
    Stm.Get("VENUE", Data.Venue);
    Stm.Get("MARKETNAME", Data.Marketname);

    return Data;
  end Get;
---------------------------------------------


  function Get(
                  Starttime : Time_Type;
                  Venue : String) return Table_Astarttimes.Data_Type is
    Data       : Table_Astarttimes.Data_Type;
    End_Of_Set : Boolean := True;
  begin
    Data.Starttime := Starttime;
    Data.Venue := Venue;
    Data.Read(End_Of_Set);
    return Data;
  end Get;



  procedure Read_All(List  : in out Astarttimes_List_Pack2.List;
                     Order : in     Boolean := False;
                     Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans   : constant Boolean := Sql.Transaction_Status = Sql.None;
    Transaction   : Sql.Transaction_Type;
  begin
    if Start_Trans then Transaction.Start; end if;
    if Order then
      Stm_Select_All_O.Prepare("select * from ASTARTTIMES order by " &
                  "STARTTIME, " &
                  "VENUE");
      Read_List(Stm_Select_All_O, List, Max);
    else
      Stm_Select_All.Prepare("select * from ASTARTTIMES");
      Read_List(Stm_Select_All, List, Max);
    end if;
    if Start_Trans then Transaction.Commit; end if;
  end Read_All;


  procedure Read_List(Stm   : in     Sql.Statement_Type;
                      List  : in out Astarttimes_List_Pack2.List;
                      Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans  : constant Boolean := Sql.Transaction_Status = Sql.None;
    Transaction  : Sql.Transaction_Type;
    Count        : Integer_4 := 0;
    Data         : Table_Astarttimes.Data_Type;
    Eos          : Boolean := False;
  begin
    if Start_Trans then Transaction.Start; end if;
    Stm.Open_Cursor;
    loop
      Stm.Fetch(Eos);
      exit when Eos or Count > Max;
      Data := Get(Stm);
      List.Append(Data);
      Count := Count +1;
    end loop;
    Stm.Close_Cursor;
    if Start_Trans then Transaction.Commit; end if;
  end Read_List;


  function Is_Existing(
                  Starttime : Time_Type;
                  Venue : String) return Boolean is
    Data       : Table_Astarttimes.Data_Type;
    End_Of_Set : Boolean := True;
  begin
    Data.Starttime := Starttime;
    Data.Venue := Venue;
    Read(Data, End_Of_Set);
    return not End_Of_Set;
  end Is_Existing;


  procedure Read(Data       : in out Table_Astarttimes.Data_Type;
                 End_Of_Set : in out Boolean) is
    use Sql;
    Start_Trans   : constant Boolean := Sql.Transaction_Status = Sql.None;
    Transaction   : Sql.Transaction_Type;
  begin
    if Start_Trans then Transaction.Start; end if;
    Stm_Select.Prepare("select * from ASTARTTIMES " &
                "where STARTTIME =:STARTTIME " &
                "and VENUE =:VENUE " &
            "");
    Stm_Select.Set_Timestamp("STARTTIME", Data.Starttime);
    Stm_Select.Set("VENUE", Data.Venue);
    Stm_Select.Open_Cursor;
    Stm_Select.Fetch(End_Of_Set);
    if not End_Of_Set then
      Data := Get(Stm_Select);
    end if;
    Stm_Select.Close_Cursor;
    if Start_Trans then Transaction.Commit; end if;
  end Read;

  procedure Delete(Data : in Table_Astarttimes.Data_Type) is
  begin
    Stm_Delete.Prepare("delete from ASTARTTIMES " &
                "where STARTTIME =:STARTTIME " &
                "and VENUE =:VENUE " &
            "");
    Stm_Delete.Set_Timestamp("STARTTIME", Data.Starttime);
    Stm_Delete.Set("VENUE", Data.Venue);
    Stm_Delete.Execute;
  end Delete;

  procedure Update(Data : in out Table_Astarttimes.Data_Type ; Keep_Timestamp : in Boolean := False) is
    Now     : Calendar2.Time_Type := Calendar2.Clock;
    Process : Process_Io.Process_Type     := Process_Io.This_Process;
  begin
    Stm_Update.Prepare("update ASTARTTIMES set  " &
            "MARKETNAME=:MARKETNAME " &
            "where STARTTIME=:STARTTIME " &
            "and VENUE=:VENUE " &
            "");

    if not Keep_Timestamp then
      null; --for tables without Ixx*
    end if;
      Stm_Update.Set("MARKETNAME", Data.Marketname);
    Stm_Update.Set_Timestamp("STARTTIME", Data.Starttime);
    Stm_Update.Set("VENUE", Data.Venue);
    Stm_Update.Execute;
  end Update;

  procedure Insert(Data : in out Table_Astarttimes.Data_Type; Keep_Timestamp : in Boolean := False) is
    Now     : Calendar2.Time_Type := Calendar2.Clock;
    Process : Process_Io.Process_Type     := Process_Io.This_Process;
  begin
    if not Keep_Timestamp then
      null; --for tables without IXX*
    end if;
    Stm_Insert.Prepare("insert into ASTARTTIMES values (" &
         ":STARTTIME," &
         ":VENUE," &
         ":MARKETNAME)");

    if not Keep_Timestamp then
      null; --for tables without Ixx*
    end if;
      Stm_Insert.Set_Timestamp("STARTTIME", Data.Starttime);
      Stm_Insert.Set("VENUE", Data.Venue);
      Stm_Insert.Set("MARKETNAME", Data.Marketname);
    Stm_Insert.Execute;
  end Insert;
--------------------------------------------

  -- primary key index several fields
  procedure Delete_Starttime_Venue(Data  : in Table_Astarttimes.Data_Type) is
  begin
    Stm_Delete_Starttime_Venue.Prepare("delete from ASTARTTIMES " &
                "where STARTTIME =:STARTTIME " &
                "and VENUE =:VENUE " &
            "");
    Stm_Delete_Starttime_Venue.Set_Timestamp("STARTTIME", Data.Starttime);
    Stm_Delete_Starttime_Venue.Set("VENUE", Data.Venue);
    Stm_Delete_Starttime_Venue.Execute;
  end Delete_Starttime_Venue;
  --------------------------------------------


  -- part of primary key index
  procedure Delete_I1_Starttime(Data  : in     Table_Astarttimes.Data_Type) is
  begin
    Stm_Delete_I1_Starttime.Prepare("delete from ASTARTTIMES " &
                "where STARTTIME =:STARTTIME " &
            "");
    Stm_Delete_I1_Starttime.Set_Timestamp("STARTTIME", Data.Starttime);
    Stm_Delete_I1_Starttime.Execute;
  end Delete_I1_Starttime;

  -- part of primary key index
  function Is_Existing_I1(
      Starttime : in Time_Type) return Boolean is
    Data       : Table_Astarttimes.Data_Type;
    Is_Exist   : Boolean := False;
    List       : Astarttimes_List_Pack2.List;
  begin
    Data.Starttime := Starttime;
    Read_I1_Starttime(Data, List, False, 1);
    Is_Exist := not List.Is_Empty;
    List.Clear;
    return Is_Exist;
  end Is_Existing_I1;

  -- part of primary key index
  procedure Delete_I1_Starttime_Venue(Data  : in     Table_Astarttimes.Data_Type) is
  begin
    Stm_Delete_I1_Starttime_Venue.Prepare("delete from ASTARTTIMES " &
                "where STARTTIME =:STARTTIME " &
                "and VENUE =:VENUE " &
            "");
    Stm_Delete_I1_Starttime_Venue.Set_Timestamp("STARTTIME", Data.Starttime);
    Stm_Delete_I1_Starttime_Venue.Set("VENUE", Data.Venue);
    Stm_Delete_I1_Starttime_Venue.Execute;
  end Delete_I1_Starttime_Venue;

  -- part of primary key index
  function Is_Existing_I1(
      Starttime : in Time_Type;
      Venue : in String) return Boolean is
    Data       : Table_Astarttimes.Data_Type;
    Is_Exist   : Boolean := False;
    List       : Astarttimes_List_Pack2.List;
  begin
    Data.Starttime := Starttime;
    Data.Venue := Venue;
    Read_I1_Starttime_Venue(Data, List, False, 1);
    Is_Exist := not List.Is_Empty;
    List.Clear;
    return Is_Exist;
  end Is_Existing_I1;



  -- Procedures for all DBMS


  function To_String(Data : in Table_Astarttimes.Data_Type) return String is
  begin
    return
          "Starttime = " & Calendar2.String_Date_And_Time(Data.Starttime, Milliseconds => True ) & " " &
          "Venue = " & Utils.Trim(Data.Venue) & " " &
          "Marketname = " & Utils.Trim(Data.Marketname) & " " &
          "";
  end To_String;

  function To_JSON(Data : in Table_Astarttimes.Data_Type) return JSON_Value is
    Json_Data : JSON_Value := Create_Object;
  begin
    Json_Data.Set_Field(Field_Name => "starttime", Field => Data.Starttime.To_String);
    Json_Data.Set_Field(Field_Name => "venue", Field => Utils.Trim(Data.Venue));
    Json_Data.Set_Field(Field_Name => "marketname", Field => Utils.Trim(Data.Marketname));
    return Json_Data;
  end To_JSON;

  function From_JSON(JSON_Data : in JSON_Value) return Table_Astarttimes.Data_Type is
    use Ada.Strings;
    Data : Table_Astarttimes.Data_Type;
  begin
    if JSON_Data.Has_Field("starttime") then
      declare
        Tmp : String := JSON_Data.Get("starttime");
      begin  -- "marketStartTime":"2013-06-22T17:39:00.000Z"
        Data.Starttime := Calendar2.To_Time_Type(Tmp(1..10), Tmp(12..23));
      end;
    end if;

    if JSON_Data.Has_Field("venue") then
      Move( Source => JSON_Data.Get("venue"), Target => Data.Venue , Drop => Right);
    end if;

    if JSON_Data.Has_Field("marketname") then
      Move( Source => JSON_Data.Get("marketname"), Target => Data.Marketname , Drop => Right);
    end if;

    return Data;
  end From_JSON;

  function To_Xml(Data      : in Table_Astarttimes.Data_Type;
                  Ret_Start : in Boolean;
                  Ret_Data  : in Boolean;
                  Ret_End   : in Boolean) return String is
    Ls      : constant String := "";
    S_Start : constant String := "<ASTARTTIMES_ROW>" & Ls;
    S_End   : constant String := "</ASTARTTIMES_ROW>" & Ls;
    S1 : constant String :=
          "<STARTTIME>" & Calendar2.String_Date_And_Time(Data.Starttime, Milliseconds => True) & "</STARTTIME>" & Ls;
    S2 : constant String :=
          "<VENUE>" & Utils.Trim(Data.Venue) & "</VENUE>" & Ls;
    S3 : constant String :=
          "<MARKETNAME>" & Utils.Trim(Data.Marketname) & "</MARKETNAME>" & Ls;
    --------------------------------
    function Get_String(S : in String; Ret : in Boolean) return String is
    begin
      if Ret then return S; else return ""; end if;
    end Get_String;
    --------------------------------
  begin
    return Get_String(S_Start, Ret_Start) & 
           Get_String(
                       S1 &  S2 &  S3 , Ret_Data) &
           Get_String(S_End, Ret_End) & Ascii.LF;
  end To_Xml;
    --------------------------------

  --------------------------------------------
  type Astarttimes_Reader is new Sax.Readers.Reader with record
    Current_Tag    : Unbounded_String := Null_Unbounded_String;
    Accumulated    : Unbounded_String := Null_Unbounded_String;
    OK             : Boolean := True;
    Found_Set      : Boolean := True;
    Astarttimes_List     : Table_Astarttimes.Astarttimes_List_Pack2.List;
    Astarttimes_Data     : Table_Astarttimes.Data_Type := Empty_Data;
  end record;

  overriding procedure Start_Element(Handler       : in out Astarttimes_Reader;
                                     Namespace_URI : Unicode.CES.Byte_Sequence := "";
                                     Local_Name    : Unicode.CES.Byte_Sequence := "";
                                     Qname         : Unicode.CES.Byte_Sequence := "";
                                     Atts          : Sax.Attributes.Attributes'Class);

  overriding procedure End_Element(Handler         : in out Astarttimes_Reader;
                                   Namespace_URI   : Unicode.CES.Byte_Sequence := "";
                                   Local_Name      : Unicode.CES.Byte_Sequence := "";
                                   Qname           : Unicode.CES.Byte_Sequence := "");

  overriding procedure Characters(Handler          : in out Astarttimes_Reader;
                                  Ch               : Unicode.CES.Byte_Sequence := "");

  --------------------------------------------
  overriding procedure Start_Element(Handler       : in out Astarttimes_Reader;
                          Namespace_URI : Unicode.CES.Byte_Sequence := "";
                          Local_Name    : Unicode.CES.Byte_Sequence := "";
                          Qname         : Unicode.CES.Byte_Sequence := "";
                          Atts          : Sax.Attributes.Attributes'Class) is
    pragma Warnings(Off,Namespace_URI);
    pragma Warnings(Off,Qname);
    pragma Warnings(Off,Atts);
    The_Tag : constant String := Local_Name;
  begin
    Handler.Current_Tag := To_Unbounded_String(The_Tag);
    Handler.Accumulated := Null_Unbounded_String;
    if The_Tag = Table_Astarttimes_Set_Name then
      Handler.Found_Set := True;
    end if;
  exception
    when Ada.Strings.Length_Error => Handler.OK := False;
    when Constraint_Error         => Handler.OK := False;
  end Start_Element;
  --------------------------------------------

  --------------------------------------------
  overriding procedure End_Element(Handler       : in out Astarttimes_Reader;
                        Namespace_URI : Unicode.CES.Byte_Sequence := "";
                        Local_Name    : Unicode.CES.Byte_Sequence := "";
                        Qname         : Unicode.CES.Byte_Sequence := "") is
    pragma Warnings(Off,Namespace_URI);
    pragma Warnings(Off,Qname);
    The_Tag : constant String := Local_Name;
  begin
    if The_Tag = Table_Astarttimes_Set_Name then
      Handler.Found_Set := False;
    elsif The_Tag = Table_Astarttimes_Row_Name then
      if Handler.Found_Set then
        Handler.Astarttimes_List.Append(Handler.Astarttimes_Data);
        Handler.Astarttimes_Data := Empty_Data;
      end if;
    end if;
  exception
    when Ada.Strings.Length_Error => Handler.OK := False;
  end End_Element;
  --------------------------------------------

  --------------------------------------------
  overriding procedure Characters(Handler          : in out Astarttimes_Reader;
                       Ch               : Unicode.CES.Byte_Sequence := "") is
    function To_Iso_Latin_15(Str : Unicode.CES.Byte_Sequence) return String is
      use Unicode.Encodings;
    begin
      return  Convert(Str, Get_By_Name("utf-8"), Get_By_Name("iso-8859-15"));
    end To_Iso_Latin_15;
    The_Tag   : constant String := To_String(Handler.Current_Tag);
    The_Value : constant String := To_Iso_Latin_15(Ch);
    procedure Fix_String (Value    : String;
                          Variable : in out String) is
    begin
      Append(Handler.Accumulated, Value);
      Ada.Strings.Fixed.Move(To_String(Handler.Accumulated), Variable);
    end Fix_String;
  begin
    if Handler.Found_Set then
      if The_Tag = Starttime_Name then
       Handler.Astarttimes_Data.Starttime := Calendar2.To_Time_Type(The_Value(1..11), The_Value(13..24));
      elsif The_Tag = Venue_Name then
       Fix_String(The_Value, Handler.Astarttimes_Data.Venue);
      elsif The_Tag = Marketname_Name then
       Fix_String(The_Value, Handler.Astarttimes_Data.Marketname);
      end if;
    end if;
  exception
    when Ada.Strings.Length_Error => Handler.OK := False;
  end Characters;

  --------------------------------------------


  function To_Map (Data : Table_Astarttimes.Data_Type'class) return Table_Astarttimes.Astarttimes_Map_Pack_String.Map is
    Tmp_Map :  Table_Astarttimes.Astarttimes_Map_Pack_String.Map;
    Key : Key_Type := (others => ' ');
    Tmp_U_B_String : Unbounded_String := Null_Unbounded_String;
    Tmp_String     : String(1..1);
    pragma Warnings(Off, Tmp_String); -- used only if we have Character fields (ie String(1..1)
  begin
    Move("STARTTIME", Key);
    Tmp_U_B_String := To_Unbounded_String(String_Date_And_Time(Data.Starttime));
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    Move("VENUE", Key);
    Tmp_U_B_String := To_Unbounded_String(Data.Venue);
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    Move("MARKETNAME", Key);
    Tmp_U_B_String := To_Unbounded_String(Data.Marketname);
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    return Tmp_Map;
  end To_Map;
 ---------------------------


  function To_Map (Data : Table_Astarttimes.Data_Type'class) return Table_Astarttimes.Astarttimes_Map_Pack_Column_Type.Map is
    Tmp_Map :  Table_Astarttimes.Astarttimes_Map_Pack_Column_Type.Map;
    Key : Column_Type;
    Tmp_U_B_String : Unbounded_String := Null_Unbounded_String;
    Tmp_String     : String(1..1);
    pragma Warnings(Off, Tmp_String); -- used only if we have Character fields (ie String(1..1)
  begin
    Key := Starttime;
    Tmp_U_B_String := To_Unbounded_String(String_Date_And_Time(Data.Starttime));
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    Key := Venue;
    Tmp_U_B_String := To_Unbounded_String(Data.Venue);
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    Key := Marketname;
    Tmp_U_B_String := To_Unbounded_String(Data.Marketname);
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    return Tmp_Map;
  end To_Map;
 ---------------------------
-------------------------------------------


  procedure Read_I1_Starttime(
                           Data  : in     Table_Astarttimes.Data_Type'class;
                           List  : in out Astarttimes_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := Sql.Transaction_Status = Sql.None;
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Transaction.Start; end if;
    if Order then
    Stm_Select_I1_Starttime_O.Prepare("select * from ASTARTTIMES " &
                "where STARTTIME =:STARTTIME " &
            "order by " & 
            "STARTTIME, " & 
            "VENUE");
    Stm_Select_I1_Starttime_O.Set_Timestamp("STARTTIME", Data.Starttime);
      Read_List(Stm_Select_I1_Starttime_O , List, Max);
    else
    Stm_Select_I1_Starttime.Prepare("select * from ASTARTTIMES " &
                "where STARTTIME =:STARTTIME " &
            "");
    Stm_Select_I1_Starttime.Set_Timestamp("STARTTIME", Data.Starttime);
      Read_List(Stm_Select_I1_Starttime, List, Max);
    end if;
    if Start_Trans then Transaction.Commit; end if;
  end Read_I1_Starttime;
-------------------------------------------

-------------------------------------------


  procedure Read_I1_Starttime_Venue(
                           Data  : in     Table_Astarttimes.Data_Type'class;
                           List  : in out Astarttimes_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans : constant Boolean := Sql.Transaction_Status = Sql.None;
    Transaction : Sql.Transaction_Type;
  begin
    if Start_Trans then Transaction.Start; end if;
    if Order then
    Stm_Select_I1_Starttime_Venue_O.Prepare("select * from ASTARTTIMES " &
                "where STARTTIME =:STARTTIME " &
                "and VENUE =:VENUE " &
            "order by " & 
            "STARTTIME, " & 
            "VENUE");
    Stm_Select_I1_Starttime_Venue_O.Set_Timestamp("STARTTIME", Data.Starttime);
    Stm_Select_I1_Starttime_Venue_O.Set("VENUE", Data.Venue);
      Read_List(Stm_Select_I1_Starttime_Venue_O , List, Max);
    else
    Stm_Select_I1_Starttime_Venue.Prepare("select * from ASTARTTIMES " &
                "where STARTTIME =:STARTTIME " &
                "and VENUE =:VENUE " &
            "");
    Stm_Select_I1_Starttime_Venue.Set_Timestamp("STARTTIME", Data.Starttime);
    Stm_Select_I1_Starttime_Venue.Set("VENUE", Data.Venue);
      Read_List(Stm_Select_I1_Starttime_Venue, List, Max);
    end if;
    if Start_Trans then Transaction.Commit; end if;
  end Read_I1_Starttime_Venue;
-------------------------------------------



  procedure From_Xml(Xml_Filename : in Unbounded_String;
                     A_List       : in out Astarttimes_List_Pack2.List) is
    My_Reader   : Astarttimes_Reader;
    Input       : File_Input;
  begin
    My_Reader.Astarttimes_List := A_List;
    My_Reader.Current_Tag := Null_Unbounded_String;
    Open(To_String(Xml_Filename), Input);
    My_Reader.Set_Feature(Validation_Feature,False);
    My_Reader.Parse(Input);
    Input.Close;
    if not My_Reader.OK then
       My_Reader.Astarttimes_List.Clear;
    end if;
    A_List := My_Reader.Astarttimes_List;
  end From_Xml;

end Table_Astarttimes;
