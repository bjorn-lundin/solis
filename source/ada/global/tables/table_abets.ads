-----------------------------------------------------
-- This file is AUTOGENERATED by                     
-- repo                                              
--                                                   
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!----- 
-----------DO NOT EDIT THIS FILE!!!!---------------- 
-----------------------------------------------------



with Ada.Containers.Doubly_Linked_Lists;
with Ada.Containers.Hashed_Maps;
with Ada.Containers.Ordered_Maps;
with Ada.Strings;
with Ada.Strings.Hash;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Gnatcoll.Json; use Gnatcoll.Json;
with Types, Calendar2, Sql;
with Table_Utils;  --All tables inherit from here

pragma Elaborate_All(Calendar2);



package Table_Abets is
  use Types, Calendar2;
  --
  --  Table name as string 
  --

  Table_Abets_Name     : constant String := "ABETS";
  Table_Abets_Set_Name : constant String := "ABETS_SET";
  Table_Abets_Row_Name : constant String := "ABETS_ROW";

  --
  -- Column names as strings
  --

  Betid_Name : constant String := "BETID";
  Marketid_Name : constant String := "MARKETID";
  Betmode_Name : constant String := "BETMODE";
  Powerdays_Name : constant String := "POWERDAYS";
  Selectionid_Name : constant String := "SELECTIONID";
  Reference_Name : constant String := "REFERENCE";
  Size_Name : constant String := "SIZE";
  Price_Name : constant String := "PRICE";
  Side_Name : constant String := "SIDE";
  Betname_Name : constant String := "BETNAME";
  Betwon_Name : constant String := "BETWON";
  Profit_Name : constant String := "PROFIT";
  Status_Name : constant String := "STATUS";
  Exestatus_Name : constant String := "EXESTATUS";
  Exeerrcode_Name : constant String := "EXEERRCODE";
  Inststatus_Name : constant String := "INSTSTATUS";
  Insterrcode_Name : constant String := "INSTERRCODE";
  Startts_Name : constant String := "STARTTS";
  Betplaced_Name : constant String := "BETPLACED";
  Pricematched_Name : constant String := "PRICEMATCHED";
  Sizematched_Name : constant String := "SIZEMATCHED";
  Runnername_Name : constant String := "RUNNERNAME";
  Fullmarketname_Name : constant String := "FULLMARKETNAME";
  Svnrevision_Name : constant String := "SVNREVISION";
  Ixxlupd_Name : constant String := "IXXLUPD";
  Ixxluts_Name : constant String := "IXXLUTS";
  --
  -- Column names as enumerator literals
  --

  type Column_Type is (
    Betid,
    Marketid,
    Betmode,
    Powerdays,
    Selectionid,
    Reference,
    Size,
    Price,
    Side,
    Betname,
    Betwon,
    Profit,
    Status,
    Exestatus,
    Exeerrcode,
    Inststatus,
    Insterrcode,
    Startts,
    Betplaced,
    Pricematched,
    Sizematched,
    Runnername,
    Fullmarketname,
    Svnrevision,
    Ixxlupd,
    Ixxluts);
  --
  -- The type definition
  --

  type Data_Type is new Table_Utils.Root_Table_Type with record
    Betid : Integer_8 := 0 ; -- Primary Key
    Marketid : String(1 .. 11) := (others => ' ') ; -- non unique index 2
    Betmode : Integer_4 := 0 ; 
    Powerdays : Integer_4 := 0 ; -- non unique index 3
    Selectionid : Integer_4 := 0 ; 
    Reference : String(1 .. 30) := (others => ' ') ; -- non unique index 4
    Size : Fixed_Type := 0.0 ; 
    Price : Fixed_Type := 0.0 ; 
    Side : String(1 .. 4) := (others => ' ') ; 
    Betname : String(1 .. 100) := (others => ' ') ; -- non unique index 5
    Betwon : Boolean := False ; -- non unique index 6
    Profit : Fixed_Type := 0.0 ; 
    Status : String(1 .. 50) := (others => ' ') ; -- non unique index 7
    Exestatus : String(1 .. 50) := (others => ' ') ; 
    Exeerrcode : String(1 .. 50) := (others => ' ') ; 
    Inststatus : String(1 .. 50) := (others => ' ') ; 
    Insterrcode : String(1 .. 50) := (others => ' ') ; 
    Startts : Time_Type := Time_Type_First ; -- non unique index 8
    Betplaced : Time_Type := Time_Type_First ; -- non unique index 9
    Pricematched : Fixed_Type := 0.0 ; 
    Sizematched : Fixed_Type := 0.0 ; 
    Runnername : String(1 .. 50) := (others => ' ') ; 
    Fullmarketname : String(1 .. 50) := (others => ' ') ; 
    Svnrevision : String(1 .. 40) := (others => ' ') ; 
    Ixxlupd : String(1 .. 15) := (others => ' ') ; 
    Ixxluts : Time_Type := Time_Type_First ; 
  end record;


  -- Procedures for all DBMS

  -- Procedures for DBMS SQL
  -- Primary key
  function Get(Stm : in Sql.Statement_Type) return Table_Abets.Data_Type;
  --------------------------------------------
  -- Primary key
  procedure Read(Data       : in out Table_Abets.Data_Type;
                 End_Of_Set : in out Boolean);
  --------------------------------------------
  -- Primary key
  function Is_Existing(
                       Betid : Integer_8) 
                           return Boolean;
  --------------------------------------------
  -- Primary key
  function Get(
                       Betid : Integer_8)
                           return Table_Abets.Data_Type;
  --------------------------------------------
  -- Primary key
  procedure Delete(Data : in Table_Abets.Data_Type);
  --------------------------------------------
  -- Primary key
  procedure Update(Data : in out Table_Abets.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  -- Primary key
  procedure Insert(Data : in out Table_Abets.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  -- Primary key
  procedure Delete_Withcheck(Data : in Table_Abets.Data_Type);
  --------------------------------------------
  -- Primary key
  procedure Update_Withcheck(Data : in out Table_Abets.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
   -- stop Print_Def_Functions_Spec.Primary_Procs_Spec


  -- non unique index
  procedure Read_One_Marketid(
                           Data       : in out Table_Abets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  -- non unique index
  function Count_Marketid(Data : Table_Abets.Data_Type) return Integer_4;
  --------------------------------------------

  -- non unique index
  procedure Delete_Marketid(Data  : in     Table_Abets.Data_Type);
  --------------------------------------------

  -- non unique index
  function Is_Existing_I2(Marketid : in String) return Boolean;
  --------------------------------------------




  -- non unique index
  procedure Read_One_Betwon(
                           Data       : in out Table_Abets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  -- non unique index
  function Count_Betwon(Data : Table_Abets.Data_Type) return Integer_4;
  --------------------------------------------

  -- non unique index
  procedure Delete_Betwon(Data  : in     Table_Abets.Data_Type);
  --------------------------------------------

  -- non unique index
  function Is_Existing_I3(Betwon : in Boolean) return Boolean;
  --------------------------------------------




  -- non unique index
  procedure Read_One_Powerdays(
                           Data       : in out Table_Abets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  -- non unique index
  function Count_Powerdays(Data : Table_Abets.Data_Type) return Integer_4;
  --------------------------------------------

  -- non unique index
  procedure Delete_Powerdays(Data  : in     Table_Abets.Data_Type);
  --------------------------------------------

  -- non unique index
  function Is_Existing_I4(Powerdays : in Integer_4) return Boolean;
  --------------------------------------------




  -- non unique index
  procedure Read_One_Betplaced(
                           Data       : in out Table_Abets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  -- non unique index
  function Count_Betplaced(Data : Table_Abets.Data_Type) return Integer_4;
  --------------------------------------------

  -- non unique index
  procedure Delete_Betplaced(Data  : in     Table_Abets.Data_Type);
  --------------------------------------------

  -- non unique index
  function Is_Existing_I5(Betplaced : in Time_Type) return Boolean;
  --------------------------------------------




  -- non unique index
  procedure Read_One_Startts(
                           Data       : in out Table_Abets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  -- non unique index
  function Count_Startts(Data : Table_Abets.Data_Type) return Integer_4;
  --------------------------------------------

  -- non unique index
  procedure Delete_Startts(Data  : in     Table_Abets.Data_Type);
  --------------------------------------------

  -- non unique index
  function Is_Existing_I6(Startts : in Time_Type) return Boolean;
  --------------------------------------------




  -- non unique index
  procedure Read_One_Betname(
                           Data       : in out Table_Abets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  -- non unique index
  function Count_Betname(Data : Table_Abets.Data_Type) return Integer_4;
  --------------------------------------------

  -- non unique index
  procedure Delete_Betname(Data  : in     Table_Abets.Data_Type);
  --------------------------------------------

  -- non unique index
  function Is_Existing_I7(Betname : in String) return Boolean;
  --------------------------------------------




  -- non unique index
  procedure Read_One_Status(
                           Data       : in out Table_Abets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  -- non unique index
  function Count_Status(Data : Table_Abets.Data_Type) return Integer_4;
  --------------------------------------------

  -- non unique index
  procedure Delete_Status(Data  : in     Table_Abets.Data_Type);
  --------------------------------------------

  -- non unique index
  function Is_Existing_I8(Status : in String) return Boolean;
  --------------------------------------------




  -- non unique index
  procedure Read_One_Reference(
                           Data       : in out Table_Abets.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  -- non unique index
  function Count_Reference(Data : Table_Abets.Data_Type) return Integer_4;
  --------------------------------------------

  -- non unique index
  procedure Delete_Reference(Data  : in     Table_Abets.Data_Type);
  --------------------------------------------

  -- non unique index
  function Is_Existing_I9(Reference : in String) return Boolean;
  --------------------------------------------









  -- Procedures for all DBMS, primitives

  function To_String(Data : in Table_Abets.Data_Type) return String;

  function To_JSON(Data : in Table_Abets.Data_Type) return JSON_Value;

  function From_JSON(JSON_Data : in JSON_Value) return Table_Abets.Data_Type;

  function To_Xml(Data      : in Table_Abets.Data_Type;
                  Ret_Start : in Boolean;
                  Ret_Data  : in Boolean;
                  Ret_End   : in Boolean) return String;


  package Abets_List_Pack2 is new Ada.Containers.Doubly_Linked_Lists(Table_Abets.Data_Type);

  subtype Key_Type is String(1..15);

  package Abets_Map_Pack_String is new Ada.Containers.Hashed_Maps(
      Key_Type,
      Unbounded_String,
      Ada.Strings.Hash,
      "=",
      "=");

  package Abets_Map_Pack_Column_Type is new Ada.Containers.Ordered_Maps(
      Column_Type,
      Unbounded_String,
      "<",
      "=");




  function To_Map (Data : Table_Abets.Data_Type'class) return Table_Abets.Abets_Map_Pack_String.Map;


  function To_Map (Data : Table_Abets.Data_Type'class) return Table_Abets.Abets_Map_Pack_Column_Type.Map;

  --------------------------------------------

  --------------------------------------------

  procedure Read_List(Stm  : in     Sql.Statement_Type;
                      List : in out Abets_List_Pack2.List;
                      Max  : in     Integer_4 := Integer_4'Last);

  --------------------------------------------


  procedure Read_All(List  : in out Abets_List_Pack2.List;
                     Order : in     Boolean := False;
                     Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------




  procedure Read_Marketid(
                           Data  : in out Table_Abets.Data_Type'class;
                           List  : in out Abets_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last);







  procedure Read_Betwon(
                           Data  : in out Table_Abets.Data_Type'class;
                           List  : in out Abets_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last);







  procedure Read_Powerdays(
                           Data  : in out Table_Abets.Data_Type'class;
                           List  : in out Abets_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last);







  procedure Read_Betplaced(
                           Data  : in out Table_Abets.Data_Type'class;
                           List  : in out Abets_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last);







  procedure Read_Startts(
                           Data  : in out Table_Abets.Data_Type'class;
                           List  : in out Abets_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last);







  procedure Read_Betname(
                           Data  : in out Table_Abets.Data_Type'class;
                           List  : in out Abets_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last);







  procedure Read_Status(
                           Data  : in out Table_Abets.Data_Type'class;
                           List  : in out Abets_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last);







  procedure Read_Reference(
                           Data  : in out Table_Abets.Data_Type'class;
                           List  : in out Abets_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last);









  -- Procedures for all DBMS, others 

  procedure From_Xml(Xml_Filename : in Unbounded_String;
                     A_List       : in out Abets_List_Pack2.List);


  Empty_Data : Table_Abets.Data_Type;
end Table_Abets ;
