-----------------------------------------------------
-- This file is AUTOGENERATED by                     
-- repo                                              
--                                                   
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!----- 
-----------DO NOT EDIT THIS FILE!!!!---------------- 
-----------------------------------------------------



with Ada.Containers.Doubly_Linked_Lists;
with Ada.Containers.Hashed_Maps;
with Ada.Containers.Ordered_Maps;
with Ada.Strings;
with Ada.Strings.Hash;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Gnatcoll.Json; use Gnatcoll.Json;
with Types, Calendar2, Sql;
with Table_Utils;  --All tables inherit from here

pragma Elaborate_All(Calendar2);



package Table_Apriceshistory is
  use Types, Calendar2;
  --
  --  Table name as string 
  --

  Table_Apriceshistory_Name     : constant String := "APRICESHISTORY";
  Table_Apriceshistory_Set_Name : constant String := "APRICESHISTORY_SET";
  Table_Apriceshistory_Row_Name : constant String := "APRICESHISTORY_ROW";

  --
  -- Column names as strings
  --

  Marketid_Name : constant String := "MARKETID";
  Selectionid_Name : constant String := "SELECTIONID";
  Pricets_Name : constant String := "PRICETS";
  Status_Name : constant String := "STATUS";
  Totalmatched_Name : constant String := "TOTALMATCHED";
  Backprice_Name : constant String := "BACKPRICE";
  Layprice_Name : constant String := "LAYPRICE";
  Ixxlupd_Name : constant String := "IXXLUPD";
  Ixxluts_Name : constant String := "IXXLUTS";
  --
  -- Column names as enumerator literals
  --

  type Column_Type is (
    Marketid,
    Selectionid,
    Pricets,
    Status,
    Totalmatched,
    Backprice,
    Layprice,
    Ixxlupd,
    Ixxluts);
  --
  -- The type definition
  --

  type Data_Type is new Table_Utils.Root_Table_Type with record
    Marketid : String(1 .. 11) := (others => ' ') ; -- Primary Key
    Selectionid : Integer_4 := 0 ; -- Primary Key
    Pricets : Time_Type := Time_Type_First ; -- Primary Key
    Status : String(1 .. 50) := (others => ' ') ; -- non unique index 4
    Totalmatched : Fixed_Type := 0.0 ; 
    Backprice : Fixed_Type := 0.0 ; -- non unique index 5
    Layprice : Fixed_Type := 0.0 ; -- non unique index 6
    Ixxlupd : String(1 .. 15) := (others => ' ') ; 
    Ixxluts : Time_Type := Time_Type_First ; 
  end record;


  -- Procedures for all DBMS

  -- Procedures for DBMS SQL
  -- Primary key
  function Get(Stm : in Sql.Statement_Type) return Table_Apriceshistory.Data_Type;
  --------------------------------------------
  -- Primary key
  procedure Read(Data       : in out Table_Apriceshistory.Data_Type;
                 End_Of_Set : in out Boolean);
  --------------------------------------------
  -- Primary key
  function Is_Existing(
                       Marketid : String;
                       Selectionid : Integer_4;
                       Pricets : Time_Type) 
                           return Boolean;
  --------------------------------------------
  -- Primary key
  function Get(
                       Marketid : String;
                       Selectionid : Integer_4;
                       Pricets : Time_Type)
                           return Table_Apriceshistory.Data_Type;
  --------------------------------------------
  -- Primary key
  procedure Delete(Data : in Table_Apriceshistory.Data_Type);
  --------------------------------------------
  -- Primary key
  procedure Update(Data : in out Table_Apriceshistory.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  -- Primary key
  procedure Insert(Data : in out Table_Apriceshistory.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------
  -- Primary key
  procedure Delete_Withcheck(Data : in Table_Apriceshistory.Data_Type);
  --------------------------------------------
  -- Primary key
  procedure Update_Withcheck(Data : in out Table_Apriceshistory.Data_Type; Keep_Timestamp : in Boolean := False);
  --------------------------------------------

  -- primary key index several fields
  procedure Delete_Marketid_Selectionid_Pricets(Data  : in Table_Apriceshistory.Data_Type);
  --------------------------------------------


  -- part of primary key index
  procedure Delete_I1_Marketid(Data  : in     Table_Apriceshistory.Data_Type);

  -- part of primary key index)
  function Is_Existing_I1(
      Marketid : in String) return Boolean;

  -- part of primary key index
  procedure Delete_I1_Marketid_Selectionid(Data  : in     Table_Apriceshistory.Data_Type);

  -- part of primary key index)
  function Is_Existing_I1(
      Marketid : in String;
      Selectionid : in Integer_4) return Boolean;

  -- part of primary key index
  procedure Delete_I1_Marketid_Selectionid_Pricets(Data  : in     Table_Apriceshistory.Data_Type);

  -- part of primary key index)
  function Is_Existing_I1(
      Marketid : in String;
      Selectionid : in Integer_4;
      Pricets : in Time_Type) return Boolean;

  procedure Read_One_Marketid_Pricets(
                           Data       : in out Table_Apriceshistory.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);


  -- non unique index
  procedure Delete_Marketid_Pricets(Data  : in     Table_Apriceshistory.Data_Type);
  --------------------------------------------

  -- non unique index
  procedure Delete_I2_Marketid(Data  : in     Table_Apriceshistory.Data_Type);
  -- non unique index
  function Is_Existing_I2(
      Marketid : in String;
      Pricets : in Time_Type) return Boolean;

  -- non unique index
  procedure Delete_I2_Marketid_Pricets(Data  : in     Table_Apriceshistory.Data_Type);
  -- non unique index
  function Is_Existing_I2(
      Marketid : in String) return Boolean;


  -- non unique index
  procedure Read_One_Backprice(
                           Data       : in out Table_Apriceshistory.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  -- non unique index
  function Count_Backprice(Data : Table_Apriceshistory.Data_Type) return Integer_4;
  --------------------------------------------

  -- non unique index
  procedure Delete_Backprice(Data  : in     Table_Apriceshistory.Data_Type);
  --------------------------------------------

  -- non unique index
  function Is_Existing_I3(Backprice : in Fixed_Type) return Boolean;
  --------------------------------------------




  -- non unique index
  procedure Read_One_Layprice(
                           Data       : in out Table_Apriceshistory.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  -- non unique index
  function Count_Layprice(Data : Table_Apriceshistory.Data_Type) return Integer_4;
  --------------------------------------------

  -- non unique index
  procedure Delete_Layprice(Data  : in     Table_Apriceshistory.Data_Type);
  --------------------------------------------

  -- non unique index
  function Is_Existing_I4(Layprice : in Fixed_Type) return Boolean;
  --------------------------------------------




  -- non unique index
  procedure Read_One_Status(
                           Data       : in out Table_Apriceshistory.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  -- non unique index
  function Count_Status(Data : Table_Apriceshistory.Data_Type) return Integer_4;
  --------------------------------------------

  -- non unique index
  procedure Delete_Status(Data  : in     Table_Apriceshistory.Data_Type);
  --------------------------------------------

  -- non unique index
  function Is_Existing_I5(Status : in String) return Boolean;
  --------------------------------------------




  -- non unique index
  procedure Read_One_Pricets(
                           Data       : in out Table_Apriceshistory.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  -- non unique index
  function Count_Pricets(Data : Table_Apriceshistory.Data_Type) return Integer_4;
  --------------------------------------------

  -- non unique index
  procedure Delete_Pricets(Data  : in     Table_Apriceshistory.Data_Type);
  --------------------------------------------

  -- non unique index
  function Is_Existing_I6(Pricets : in Time_Type) return Boolean;
  --------------------------------------------




  -- non unique index
  procedure Read_One_Marketid(
                           Data       : in out Table_Apriceshistory.Data_Type;
                           Order      : in     Boolean := False;
                           End_Of_Set : in out Boolean);
  --------------------------------------------

  -- non unique index
  function Count_Marketid(Data : Table_Apriceshistory.Data_Type) return Integer_4;
  --------------------------------------------

  -- non unique index
  procedure Delete_Marketid(Data  : in     Table_Apriceshistory.Data_Type);
  --------------------------------------------

  -- non unique index
  function Is_Existing_I7(Marketid : in String) return Boolean;
  --------------------------------------------






  -- Procedures for all DBMS, primitives

  function To_String(Data : in Table_Apriceshistory.Data_Type) return String;

  function To_JSON(Data : in Table_Apriceshistory.Data_Type) return JSON_Value;

  function From_JSON(JSON_Data : in JSON_Value) return Table_Apriceshistory.Data_Type;

  function To_Xml(Data      : in Table_Apriceshistory.Data_Type;
                  Ret_Start : in Boolean;
                  Ret_Data  : in Boolean;
                  Ret_End   : in Boolean) return String;


  package Apriceshistory_List_Pack2 is new Ada.Containers.Doubly_Linked_Lists(Table_Apriceshistory.Data_Type);

  subtype Key_Type is String(1..15);

  package Apriceshistory_Map_Pack_String is new Ada.Containers.Hashed_Maps(
      Key_Type,
      Unbounded_String,
      Ada.Strings.Hash,
      "=",
      "=");

  package Apriceshistory_Map_Pack_Column_Type is new Ada.Containers.Ordered_Maps(
      Column_Type,
      Unbounded_String,
      "<",
      "=");




  function To_Map (Data : Table_Apriceshistory.Data_Type'class) return Table_Apriceshistory.Apriceshistory_Map_Pack_String.Map;


  function To_Map (Data : Table_Apriceshistory.Data_Type'class) return Table_Apriceshistory.Apriceshistory_Map_Pack_Column_Type.Map;

  --------------------------------------------

  --------------------------------------------

  procedure Read_List(Stm  : in     Sql.Statement_Type;
                      List : in out Apriceshistory_List_Pack2.List;
                      Max  : in     Integer_4 := Integer_4'Last);

  --------------------------------------------


  procedure Read_All(List  : in out Apriceshistory_List_Pack2.List;
                     Order : in     Boolean := False;
                     Max   : in     Integer_4 := Integer_4'Last);
  --------------------------------------------


  procedure Read_I1_Marketid(
                           Data  : in     Table_Apriceshistory.Data_Type'class;
                           List  : in out Apriceshistory_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last);



  procedure Read_I1_Marketid_Selectionid(
                           Data  : in     Table_Apriceshistory.Data_Type'class;
                           List  : in out Apriceshistory_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last);



  procedure Read_I1_Marketid_Selectionid_Pricets(
                           Data  : in     Table_Apriceshistory.Data_Type'class;
                           List  : in out Apriceshistory_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last);





  procedure Read_Marketid_Pricets(
                           Data  : in out Table_Apriceshistory.Data_Type'class;
                           List  : in out Apriceshistory_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last);


  procedure Read_I2_Marketid(
                           Data  : in     Table_Apriceshistory.Data_Type'class;
                           List  : in out Apriceshistory_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last);

  procedure Read_I2_Marketid_Pricets(
                           Data  : in     Table_Apriceshistory.Data_Type'class;
                           List  : in out Apriceshistory_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last);






  procedure Read_Backprice(
                           Data  : in out Table_Apriceshistory.Data_Type'class;
                           List  : in out Apriceshistory_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last);







  procedure Read_Layprice(
                           Data  : in out Table_Apriceshistory.Data_Type'class;
                           List  : in out Apriceshistory_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last);







  procedure Read_Status(
                           Data  : in out Table_Apriceshistory.Data_Type'class;
                           List  : in out Apriceshistory_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last);







  procedure Read_Pricets(
                           Data  : in out Table_Apriceshistory.Data_Type'class;
                           List  : in out Apriceshistory_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last);







  procedure Read_Marketid(
                           Data  : in out Table_Apriceshistory.Data_Type'class;
                           List  : in out Apriceshistory_List_Pack2.List;
                           Order : in     Boolean := False;
                           Max   : in     Integer_4 := Integer_4'Last);






  -- Procedures for all DBMS, others 

  procedure From_Xml(Xml_Filename : in Unbounded_String;
                     A_List       : in out Apriceshistory_List_Pack2.List);


  Empty_Data : Table_Apriceshistory.Data_Type;
end Table_Apriceshistory ;
