
-----------------------------------------------------
-- This file is AUTOGENERATED by                     
-- repo                                              
--                                                   
----CHANGES HERE WILL BE LOST NEXT GENERATE!!!!----- 
-----------DO NOT EDIT THIS FILE!!!!---------------- 
-----------------------------------------------------




pragma Warnings(Off);
with Process_Io, Utils;
with Ada.Strings.Fixed; use Ada.Strings.Fixed;
with Sax.Readers;              use Sax.Readers;
with Input_Sources.File;       use Input_Sources.File;
with Unicode.CES;
with Unicode.Encodings;
with Sax.Attributes;



package body Table_Smhi is

  Stm_Select,
  Stm_Delete,
  Stm_Update,
  Stm_Insert,
  Stm_Select_All,
  Stm_Select_All_O  : Sql.Statement_Type;


  Stm_Delete_With_Check,
  Stm_Update_With_Check  : Sql.Statement_Type;


  -- Primary keys, when several fields
  Stm_Select_I1_Time_Start,
  Stm_Select_I1_Time_Start_O,
  Stm_Delete_I1_Time_Start : Sql.Statement_Type; 



  -- Procedures for all DBMS

  -- Procedures for DBMS SQL
  -- Primary key

  function Get(Stm : in Sql.Statement_Type) return Table_Smhi.Data_Type is
    Data : Table_Smhi.Data_Type;
  begin
    Stm.Get_Timestamp("TIME_START", Data.Time_Start);
    Stm.Get_Timestamp("TIME_STOP", Data.Time_Stop);
    Stm.Get("AIR_TEMPERATURE", Data.Air_Temperature);
    Stm.Get("WIND_SPEED", Data.Wind_Speed);
    Stm.Get("CLOUD_COVERAGE", Data.Cloud_Coverage);
    Stm.Get("IXXLUPD", Data.Ixxlupd);
    Stm.Get_Timestamp("IXXLUTS", Data.Ixxluts);

    return Data;
  end Get;
---------------------------------------------


  function Get(
                  Time_Start : Time_Type) return Table_Smhi.Data_Type is
    Data       : Table_Smhi.Data_Type;
    End_Of_Set : Boolean := True;
  begin
    Data.Time_Start := Time_Start;
    Data.Read(End_Of_Set);
    return Data;
  end Get;



  procedure Read_All(List  : in out Smhi_List_Pack2.List;
                     Order : in     Boolean := False;
                     Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans   : constant Boolean := Sql.Transaction_Status = Sql.None;
    Transaction   : Sql.Transaction_Type;
  begin
    if Start_Trans then Transaction.Start; end if;
    if Order then
      Stm_Select_All_O.Prepare("select * from SMHI order by " &
                  "TIME_START");
      Read_List(Stm_Select_All_O, List, Max);
    else
      Stm_Select_All.Prepare("select * from SMHI");
      Read_List(Stm_Select_All, List, Max);
    end if;
    if Start_Trans then Transaction.Commit; end if;
  end Read_All;


  procedure Read_List(Stm   : in     Sql.Statement_Type;
                      List  : in out Smhi_List_Pack2.List;
                      Max   : in     Integer_4 := Integer_4'Last) is
    use Sql;
    Start_Trans  : constant Boolean := Sql.Transaction_Status = Sql.None;
    Transaction  : Sql.Transaction_Type;
    Count        : Integer_4 := 0;
    Data         : Table_Smhi.Data_Type;
    Eos          : Boolean := False;
  begin
    if Start_Trans then Transaction.Start; end if;
    Stm.Open_Cursor;
    loop
      Stm.Fetch(Eos);
      exit when Eos or Count > Max;
      Data := Get(Stm);
      List.Append(Data);
      Count := Count +1;
    end loop;
    Stm.Close_Cursor;
    if Start_Trans then Transaction.Commit; end if;
  end Read_List;


  function Is_Existing(
                  Time_Start : Time_Type) return Boolean is
    Data       : Table_Smhi.Data_Type;
    End_Of_Set : Boolean := True;
  begin
    Data.Time_Start := Time_Start;
    Read(Data, End_Of_Set);
    return not End_Of_Set;
  end Is_Existing;


  procedure Read(Data       : in out Table_Smhi.Data_Type;
                 End_Of_Set : in out Boolean) is
    use Sql;
    Start_Trans   : constant Boolean := Sql.Transaction_Status = Sql.None;
    Transaction   : Sql.Transaction_Type;
  begin
    if Start_Trans then Transaction.Start; end if;
    Stm_Select.Prepare("select * from SMHI " &
                "where TIME_START =:TIME_START " &
            "");
    Stm_Select.Set_Timestamp("TIME_START", Data.Time_Start);
    Stm_Select.Open_Cursor;
    Stm_Select.Fetch(End_Of_Set);
    if not End_Of_Set then
      Data := Get(Stm_Select);
    end if;
    Stm_Select.Close_Cursor;
    if Start_Trans then Transaction.Commit; end if;
  end Read;

  procedure Delete(Data : in Table_Smhi.Data_Type) is
  begin
    Stm_Delete.Prepare("delete from SMHI " &
                "where TIME_START =:TIME_START " &
            "");
    Stm_Delete.Set_Timestamp("TIME_START", Data.Time_Start);
    Stm_Delete.Execute;
  end Delete;

  procedure Update(Data : in out Table_Smhi.Data_Type ; Keep_Timestamp : in Boolean := False) is
    Now     : Calendar2.Time_Type := Calendar2.Clock;
    Process : Process_Io.Process_Type     := Process_Io.This_Process;
  begin
    Stm_Update.Prepare("update SMHI set  " &
            "TIME_STOP=:TIME_STOP, " &
            "AIR_TEMPERATURE=:AIR_TEMPERATURE, " &
            "WIND_SPEED=:WIND_SPEED, " &
            "CLOUD_COVERAGE=:CLOUD_COVERAGE, " &
            "IXXLUPD=:IXXLUPD, " &
            "IXXLUTS=:IXXLUTS " &
            "where TIME_START=:TIME_START " &
            "");

    if not Keep_Timestamp then
      Data.Ixxluts := Now;
    end if;
      Stm_Update.Set_Timestamp("TIME_STOP", Data.Time_Stop);
      Stm_Update.Set("AIR_TEMPERATURE", Data.Air_Temperature);
      Stm_Update.Set("WIND_SPEED", Data.Wind_Speed);
      Stm_Update.Set("CLOUD_COVERAGE", Data.Cloud_Coverage);
    if not Keep_Timestamp then
      null; --for tables without Ixxlupd
      Data.Ixxlupd := Process.Name(1..15);
    end if;
      Stm_Update.Set("IXXLUPD", Data.Ixxlupd);
      Stm_Update.Set_Timestamp("IXXLUTS", Data.Ixxluts);
    Stm_Update.Set_Timestamp("TIME_START", Data.Time_Start);
    Stm_Update.Execute;
  end Update;

  procedure Insert(Data : in out Table_Smhi.Data_Type; Keep_Timestamp : in Boolean := False) is
    Now     : Calendar2.Time_Type := Calendar2.Clock;
    Process : Process_Io.Process_Type     := Process_Io.This_Process;
  begin
    if not Keep_Timestamp then
      Data.Ixxluts := Now;
    end if;
    Stm_Insert.Prepare("insert into SMHI values (" &
         ":TIME_START," &
         ":TIME_STOP," &
         ":AIR_TEMPERATURE," &
         ":WIND_SPEED," &
         ":CLOUD_COVERAGE," &
         ":IXXLUPD," &
         ":IXXLUTS)");

    if not Keep_Timestamp then
      Data.Ixxluts := Now;
    end if;
      Stm_Insert.Set_Timestamp("TIME_START", Data.Time_Start);
      Stm_Insert.Set_Timestamp("TIME_STOP", Data.Time_Stop);
      Stm_Insert.Set("AIR_TEMPERATURE", Data.Air_Temperature);
      Stm_Insert.Set("WIND_SPEED", Data.Wind_Speed);
      Stm_Insert.Set("CLOUD_COVERAGE", Data.Cloud_Coverage);
    if not Keep_Timestamp then
      null; --for tables without Ixxlupd
      Data.Ixxlupd := Process.Name(1..15);
    end if;
      Stm_Insert.Set("IXXLUPD", Data.Ixxlupd);
      Stm_Insert.Set_Timestamp("IXXLUTS", Data.Ixxluts);
    Stm_Insert.Execute;
  end Insert;
--------------------------------------------
  procedure Delete_Withcheck(Data : in Table_Smhi.Data_Type) is
  begin
    Stm_Delete_With_Check.Prepare("delete from SMHI " &
                "where TIME_START =:TIME_START " &
            "and IXXLUPD = :IXXLUPD " &
            "and IXXLUTS = :IXXLUTS " &
            "");
    Stm_Delete_With_Check.Set_Timestamp("TIME_START", Data.Time_Start);
    Stm_Delete_With_Check.Set("IXXLUPD", Data.Ixxlupd);
    Stm_Delete_With_Check.Set_Timestamp("IXXLUTS", Data.Ixxluts);
    Stm_Delete_With_Check.Execute;
  end Delete_Withcheck;
--------------------------------------------
  procedure Update_Withcheck(Data : in out Table_Smhi.Data_Type; Keep_Timestamp : in Boolean := False) is
    Now     : Calendar2.Time_Type := Calendar2.Clock;
    Process : Process_Io.Process_Type     := Process_Io.This_Process;
  begin
    Stm_Update_With_Check.Prepare("update SMHI set  " &
            "TIME_STOP=:TIME_STOP, " &
            "AIR_TEMPERATURE=:AIR_TEMPERATURE, " &
            "WIND_SPEED=:WIND_SPEED, " &
            "CLOUD_COVERAGE=:CLOUD_COVERAGE, " &
            "IXXLUPD=:IXXLUPD, " &
            "IXXLUTS=:IXXLUTS " &
            "where TIME_START=:TIME_START " &
    "and IXXLUPD = :OLD_IXXLUPD " &
    "and IXXLUTS = :OLD_IXXLUTS " &
            "");
    Stm_Update_With_Check.Set_Timestamp("TIME_START", Data.Time_Start);
    Stm_Update_With_Check.Set("OLD_IXXLUPD", Data.Ixxlupd );
    Stm_Update_With_Check.Set_Timestamp("OLD_IXXLUTS", Data.Ixxluts );

    if not Keep_Timestamp then
      Data.Ixxluts := Now;
    end if;
      Stm_Update_With_Check.Set_Timestamp("TIME_STOP", Data.Time_Stop);
      Stm_Update_With_Check.Set("AIR_TEMPERATURE", Data.Air_Temperature);
      Stm_Update_With_Check.Set("WIND_SPEED", Data.Wind_Speed);
      Stm_Update_With_Check.Set("CLOUD_COVERAGE", Data.Cloud_Coverage);
    if not Keep_Timestamp then
      null; --for tables without Ixxlupd
      Data.Ixxlupd := Process.Name(1..15);
    end if;
      Stm_Update_With_Check.Set("IXXLUPD", Data.Ixxlupd);
      Stm_Update_With_Check.Set_Timestamp("IXXLUTS", Data.Ixxluts);
    Stm_Update_With_Check.Execute;
  end Update_Withcheck;
--------------------------------------------
   -- stop Print_Def_Functions_Body.Primary_Procs_Body



  -- Procedures for all DBMS


  function To_String(Data : in Table_Smhi.Data_Type) return String is
  begin
    return
          "Time_Start = " & Calendar2.String_Date_And_Time(Data.Time_Start, Milliseconds => True ) & " " &
          "Time_Stop = " & Calendar2.String_Date_And_Time(Data.Time_Stop, Milliseconds => True ) & " " &
          "Air_Temperature = " & Utils.F8_Image(Data.Air_Temperature) & " " &
          "Wind_Speed = " & Utils.F8_Image(Data.Wind_Speed) & " " &
          "Cloud_Coverage = " & Utils.Trim(Data.Cloud_Coverage'Img) & " " &
          "Ixxlupd = " & Utils.Trim(Data.Ixxlupd) & " " &
          "Ixxluts = " & Calendar2.String_Date_And_Time(Data.Ixxluts, Milliseconds => True ) & " " &
          "";
  end To_String;

  function To_JSON(Data : in Table_Smhi.Data_Type) return JSON_Value is
    Json_Data : JSON_Value := Create_Object;
  begin
    Json_Data.Set_Field(Field_Name => "time_start", Field => Data.Time_Start.To_String);
    Json_Data.Set_Field(Field_Name => "time_stop", Field => Data.Time_Stop.To_String);
    Json_Data.Set_Field(Field_Name => "air_temperature", Field => Float(Data.Air_Temperature));
    Json_Data.Set_Field(Field_Name => "wind_speed", Field => Float(Data.Wind_Speed));
    Json_Data.Set_Field(Field_Name => "cloud_coverage", Field => Long_Integer(Data.Cloud_Coverage));
    Json_Data.Set_Field(Field_Name => "ixxlupd", Field => Utils.Trim(Data.Ixxlupd));
    Json_Data.Set_Field(Field_Name => "ixxluts", Field => Data.Ixxluts.To_String);
    return Json_Data;
  end To_JSON;

  function From_JSON(JSON_Data : in JSON_Value) return Table_Smhi.Data_Type is
    use Ada.Strings;
    Data : Table_Smhi.Data_Type;
  begin
    if JSON_Data.Has_Field("time_start") then
      declare
        Tmp : String := JSON_Data.Get("time_start");
      begin  -- "marketStartTime":"2013-06-22T17:39:00.000Z"
        Data.Time_Start := Calendar2.To_Time_Type(Tmp(1..10), Tmp(12..23));
      end;
    end if;

    if JSON_Data.Has_Field("time_stop") then
      declare
        Tmp : String := JSON_Data.Get("time_stop");
      begin  -- "marketStartTime":"2013-06-22T17:39:00.000Z"
        Data.Time_Stop := Calendar2.To_Time_Type(Tmp(1..10), Tmp(12..23));
      end;
    end if;

    if JSON_Data.Has_Field("air_temperature") then
      declare
        Tmp : Float := 0.0;
      begin
        Tmp := JSON_Data.Get("air_temperature");
        Data.Air_Temperature := Float(Tmp);
      end;
    end if;

    if JSON_Data.Has_Field("wind_speed") then
      declare
        Tmp : Float := 0.0;
      begin
        Tmp := JSON_Data.Get("wind_speed");
        Data.Wind_Speed := Float(Tmp);
      end;
    end if;

    if JSON_Data.Has_Field("cloud_coverage") then
      declare
        Tmp : Long_Integer := 0;
      begin
        Tmp := JSON_Data.Get("cloud_coverage");
        Data.Cloud_Coverage := Integer_4(Tmp);
      end;
    end if;

    if JSON_Data.Has_Field("ixxlupd") then
      Move( Source => JSON_Data.Get("ixxlupd"), Target => Data.Ixxlupd , Drop => Right);
    end if;

    if JSON_Data.Has_Field("ixxluts") then
      declare
        Tmp : String := JSON_Data.Get("ixxluts");
      begin  -- "marketStartTime":"2013-06-22T17:39:00.000Z"
        Data.Ixxluts := Calendar2.To_Time_Type(Tmp(1..10), Tmp(12..23));
      end;
    end if;

    return Data;
  end From_JSON;

  function To_Xml(Data      : in Table_Smhi.Data_Type;
                  Ret_Start : in Boolean;
                  Ret_Data  : in Boolean;
                  Ret_End   : in Boolean) return String is
    Ls      : constant String := "";
    S_Start : constant String := "<SMHI_ROW>" & Ls;
    S_End   : constant String := "</SMHI_ROW>" & Ls;
    S1 : constant String :=
          "<TIME_START>" & Calendar2.String_Date_And_Time(Data.Time_Start, Milliseconds => True) & "</TIME_START>" & Ls;
    S2 : constant String :=
          "<TIME_STOP>" & Calendar2.String_Date_And_Time(Data.Time_Stop, Milliseconds => True) & "</TIME_STOP>" & Ls;
    S3 : constant String :=
          "<AIR_TEMPERATURE>" & Utils.F8_Image(Data.Air_Temperature) & "</AIR_TEMPERATURE>" & Ls;
    S4 : constant String :=
          "<WIND_SPEED>" & Utils.F8_Image(Data.Wind_Speed) & "</WIND_SPEED>" & Ls;
    S5 : constant String :=
          "<CLOUD_COVERAGE>" & Utils.Trim(Data.Cloud_Coverage'Img) & "</CLOUD_COVERAGE>" & Ls;
    S6 : constant String :=
          "<IXXLUPD>" & Utils.Trim(Data.Ixxlupd) & "</IXXLUPD>" & Ls;
    S7 : constant String :=
          "<IXXLUTS>" & Calendar2.String_Date_And_Time(Data.Ixxluts, Milliseconds => True) & "</IXXLUTS>" & Ls;
    --------------------------------
    function Get_String(S : in String; Ret : in Boolean) return String is
    begin
      if Ret then return S; else return ""; end if;
    end Get_String;
    --------------------------------
  begin
    return Get_String(S_Start, Ret_Start) & 
           Get_String(
                       S1 &  S2 &  S3 &  S4 &  S5 &  S6 &  S7 , Ret_Data) &
           Get_String(S_End, Ret_End) & Ascii.LF;
  end To_Xml;
    --------------------------------

  --------------------------------------------
  type Smhi_Reader is new Sax.Readers.Reader with record
    Current_Tag    : Unbounded_String := Null_Unbounded_String;
    Accumulated    : Unbounded_String := Null_Unbounded_String;
    OK             : Boolean := True;
    Found_Set      : Boolean := True;
    Smhi_List     : Table_Smhi.Smhi_List_Pack2.List;
    Smhi_Data     : Table_Smhi.Data_Type := Empty_Data;
  end record;

  overriding procedure Start_Element(Handler       : in out Smhi_Reader;
                                     Namespace_URI : Unicode.CES.Byte_Sequence := "";
                                     Local_Name    : Unicode.CES.Byte_Sequence := "";
                                     Qname         : Unicode.CES.Byte_Sequence := "";
                                     Atts          : Sax.Attributes.Attributes'Class);

  overriding procedure End_Element(Handler         : in out Smhi_Reader;
                                   Namespace_URI   : Unicode.CES.Byte_Sequence := "";
                                   Local_Name      : Unicode.CES.Byte_Sequence := "";
                                   Qname           : Unicode.CES.Byte_Sequence := "");

  overriding procedure Characters(Handler          : in out Smhi_Reader;
                                  Ch               : Unicode.CES.Byte_Sequence := "");

  --------------------------------------------
  overriding procedure Start_Element(Handler       : in out Smhi_Reader;
                          Namespace_URI : Unicode.CES.Byte_Sequence := "";
                          Local_Name    : Unicode.CES.Byte_Sequence := "";
                          Qname         : Unicode.CES.Byte_Sequence := "";
                          Atts          : Sax.Attributes.Attributes'Class) is
    pragma Warnings(Off,Namespace_URI);
    pragma Warnings(Off,Qname);
    pragma Warnings(Off,Atts);
    The_Tag : constant String := Local_Name;
  begin
    Handler.Current_Tag := To_Unbounded_String(The_Tag);
    Handler.Accumulated := Null_Unbounded_String;
    if The_Tag = Table_Smhi_Set_Name then
      Handler.Found_Set := True;
    end if;
  exception
    when Ada.Strings.Length_Error => Handler.OK := False;
    when Constraint_Error         => Handler.OK := False;
  end Start_Element;
  --------------------------------------------

  --------------------------------------------
  overriding procedure End_Element(Handler       : in out Smhi_Reader;
                        Namespace_URI : Unicode.CES.Byte_Sequence := "";
                        Local_Name    : Unicode.CES.Byte_Sequence := "";
                        Qname         : Unicode.CES.Byte_Sequence := "") is
    pragma Warnings(Off,Namespace_URI);
    pragma Warnings(Off,Qname);
    The_Tag : constant String := Local_Name;
  begin
    if The_Tag = Table_Smhi_Set_Name then
      Handler.Found_Set := False;
    elsif The_Tag = Table_Smhi_Row_Name then
      if Handler.Found_Set then
        Handler.Smhi_List.Append(Handler.Smhi_Data);
        Handler.Smhi_Data := Empty_Data;
      end if;
    end if;
  exception
    when Ada.Strings.Length_Error => Handler.OK := False;
  end End_Element;
  --------------------------------------------

  --------------------------------------------
  overriding procedure Characters(Handler          : in out Smhi_Reader;
                       Ch               : Unicode.CES.Byte_Sequence := "") is
    function To_Iso_Latin_15(Str : Unicode.CES.Byte_Sequence) return String is
      use Unicode.Encodings;
    begin
      return  Convert(Str, Get_By_Name("utf-8"), Get_By_Name("iso-8859-15"));
    end To_Iso_Latin_15;
    The_Tag   : constant String := To_String(Handler.Current_Tag);
    The_Value : constant String := To_Iso_Latin_15(Ch);
    procedure Fix_String (Value    : String;
                          Variable : in out String) is
    begin
      Append(Handler.Accumulated, Value);
      Ada.Strings.Fixed.Move(To_String(Handler.Accumulated), Variable);
    end Fix_String;
  begin
    if Handler.Found_Set then
      if The_Tag = Time_Start_Name then
       Handler.Smhi_Data.Time_Start := Calendar2.To_Time_Type(The_Value(1..11), The_Value(13..24));
      elsif The_Tag = Time_Stop_Name then
       Handler.Smhi_Data.Time_Stop := Calendar2.To_Time_Type(The_Value(1..11), The_Value(13..24));
      elsif The_Tag = Air_Temperature_Name then
       Handler.Smhi_Data.Air_Temperature := Float'value(The_Value);
      elsif The_Tag = Wind_Speed_Name then
       Handler.Smhi_Data.Wind_Speed := Float'value(The_Value);
      elsif The_Tag = Cloud_Coverage_Name then
       Handler.Smhi_Data.Cloud_Coverage := Integer_4'value(The_Value);
      elsif The_Tag = Ixxlupd_Name then
       Fix_String(The_Value, Handler.Smhi_Data.Ixxlupd);
      elsif The_Tag = Ixxluts_Name then
       Handler.Smhi_Data.Ixxluts := Calendar2.To_Time_Type(The_Value(1..11), The_Value(13..24));
      end if;
    end if;
  exception
    when Ada.Strings.Length_Error => Handler.OK := False;
  end Characters;

  --------------------------------------------


  function To_Map (Data : Table_Smhi.Data_Type'class) return Table_Smhi.Smhi_Map_Pack_String.Map is
    Tmp_Map :  Table_Smhi.Smhi_Map_Pack_String.Map;
    Key : Key_Type := (others => ' ');
    Tmp_U_B_String : Unbounded_String := Null_Unbounded_String;
    Tmp_String     : String(1..1);
    pragma Warnings(Off, Tmp_String); -- used only if we have Character fields (ie String(1..1)
  begin
    Move("TIME_START", Key);
    Tmp_U_B_String := To_Unbounded_String(String_Date_And_Time(Data.Time_Start));
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    Move("TIME_STOP", Key);
    Tmp_U_B_String := To_Unbounded_String(String_Date_And_Time(Data.Time_Stop));
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    Move("AIR_TEMPERATURE", Key);
    Tmp_U_B_String := To_Unbounded_String(Data.Air_Temperature'Img);
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    Move("WIND_SPEED", Key);
    Tmp_U_B_String := To_Unbounded_String(Data.Wind_Speed'Img);
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    Move("CLOUD_COVERAGE", Key);
    Tmp_U_B_String := To_Unbounded_String(Data.Cloud_Coverage'Img);
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    Move("IXXLUPD", Key);
    Tmp_U_B_String := To_Unbounded_String(Data.Ixxlupd);
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    Move("IXXLUTS", Key);
    Tmp_U_B_String := To_Unbounded_String(String_Date_And_Time(Data.Ixxluts));
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    return Tmp_Map;
  end To_Map;
 ---------------------------


  function To_Map (Data : Table_Smhi.Data_Type'class) return Table_Smhi.Smhi_Map_Pack_Column_Type.Map is
    Tmp_Map :  Table_Smhi.Smhi_Map_Pack_Column_Type.Map;
    Key : Column_Type;
    Tmp_U_B_String : Unbounded_String := Null_Unbounded_String;
    Tmp_String     : String(1..1);
    pragma Warnings(Off, Tmp_String); -- used only if we have Character fields (ie String(1..1)
  begin
    Key := Time_Start;
    Tmp_U_B_String := To_Unbounded_String(String_Date_And_Time(Data.Time_Start));
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    Key := Time_Stop;
    Tmp_U_B_String := To_Unbounded_String(String_Date_And_Time(Data.Time_Stop));
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    Key := Air_Temperature;
    Tmp_U_B_String := To_Unbounded_String(Data.Air_Temperature'Img);
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    Key := Wind_Speed;
    Tmp_U_B_String := To_Unbounded_String(Data.Wind_Speed'Img);
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    Key := Cloud_Coverage;
    Tmp_U_B_String := To_Unbounded_String(Data.Cloud_Coverage'Img);
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    Key := Ixxlupd;
    Tmp_U_B_String := To_Unbounded_String(Data.Ixxlupd);
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    Key := Ixxluts;
    Tmp_U_B_String := To_Unbounded_String(String_Date_And_Time(Data.Ixxluts));
    Tmp_Map.Insert(Key, Tmp_U_B_String);

    return Tmp_Map;
  end To_Map;
 ---------------------------


  procedure From_Xml(Xml_Filename : in Unbounded_String;
                     A_List       : in out Smhi_List_Pack2.List) is
    My_Reader   : Smhi_Reader;
    Input       : File_Input;
  begin
    My_Reader.Smhi_List := A_List;
    My_Reader.Current_Tag := Null_Unbounded_String;
    Open(To_String(Xml_Filename), Input);
    My_Reader.Set_Feature(Validation_Feature,False);
    My_Reader.Parse(Input);
    Input.Close;
    if not My_Reader.OK then
       My_Reader.Smhi_List.Clear;
    end if;
    A_List := My_Reader.Smhi_List;
  end From_Xml;

end Table_Smhi;
